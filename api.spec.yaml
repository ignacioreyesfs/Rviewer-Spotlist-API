openapi: 3.0.0
info:
  title: Spotlist
  version: 1.0.0
paths:
  /users/:userid/lists:
    post:
      summary: Adds a list to a given user
      security:
        - basicPassword: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                songs:
                  type: array
                  items:
                    $ref: "#/components/schemas/Song"
        description: List of songs
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SongList"
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: User not found with this id (or user is not the one authenticated)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Gets the lists of a given user
      security:
        - basicPassword: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SongList"
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: User not found with this id (or user is not the one authenticated)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/:userid/lists/:listid:
    get:
      summary: Get a specific list of a user
      security:
        - basicPassword: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SongList"
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: User not found with this id (or user is not the one authenticated)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/:userid/lists/:listid/songs:
    post:
      summary: Add a song to a list
      security:
        - basicPassword: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
        description: List of songs
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: User not found with this id (or user is not the one authenticated)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - password
      properties:
        id:
          type: string
        name:
          type: string
        password:
          type: string
    Song:
      type: object
      required:
        - artist
        - title
      properties:
        artist:
          type: string
        title:
          type: string
    SongList:
      properties:
        listId:
          type: string
        songs:
          type: array
          items:
            $ref: "#/components/schemas/Song"
      required:
        - listId
    Error:
      properties:
        message:
          type: string